# Production Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-udyam_db}
      POSTGRES_USER: ${POSTGRES_USER:-udyam_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-udyam_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - udyam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-udyam_user} -d ${POSTGRES_DB:-udyam_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-udyam_user}:${POSTGRES_PASSWORD:-udyam_password}@postgres:5432/${POSTGRES_DB:-udyam_db}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - udyam-network
    volumes:
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Optional for local testing)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://backend:3001
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - udyam-network

volumes:
  postgres_data:
  backend_uploads:

networks:
  udyam-network:
    driver: bridge
